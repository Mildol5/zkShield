
SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

CREATE SCHEMA IF NOT EXISTS "extensions";

ALTER SCHEMA "extensions" OWNER TO "postgres";

CREATE EXTENSION IF NOT EXISTS "pgsodium" WITH SCHEMA "pgsodium";

CREATE SCHEMA IF NOT EXISTS "public";

ALTER SCHEMA "public" OWNER TO "pg_database_owner";

CREATE EXTENSION IF NOT EXISTS "pg_graphql" WITH SCHEMA "graphql";

CREATE EXTENSION IF NOT EXISTS "pg_stat_statements" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "pgcrypto" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "pgjwt" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "supabase_vault" WITH SCHEMA "vault";

CREATE EXTENSION IF NOT EXISTS "uuid-ossp" WITH SCHEMA "extensions";

ALTER FUNCTION "extensions"."grant_pg_cron_access"() OWNER TO "postgres";

ALTER FUNCTION "extensions"."grant_pg_graphql_access"() OWNER TO "supabase_admin";

ALTER FUNCTION "extensions"."grant_pg_net_access"() OWNER TO "postgres";

ALTER FUNCTION "extensions"."pgrst_drop_watch"() OWNER TO "supabase_admin";

ALTER FUNCTION "extensions"."set_graphql_placeholder"() OWNER TO "supabase_admin";

SET default_tablespace = '';

SET default_table_access_method = "heap";

CREATE TABLE "public"."addresses" (
    "address" character varying(42) NOT NULL,
    "created_at" timestamp with time zone DEFAULT "timezone"('utc'::"text", "now"()) NOT NULL
);

ALTER TABLE "public"."addresses" OWNER TO "postgres";

CREATE TABLE "public"."shield_account_addresses" (
    "shield_account_id" bigint,
    "address" character varying(42),
    "created_at" timestamp with time zone DEFAULT "timezone"('utc'::"text", "now"()) NOT NULL
);

ALTER TABLE "public"."shield_account_addresses" OWNER TO "postgres";

CREATE TABLE "public"."shield_account_invitations" (
    "shield_account_id" bigint,
    "inviter_address" character varying(42),
    "recipient_address" character varying(42),
    "status" "text" DEFAULT 'pending'::"text",
    "created_at" timestamp with time zone DEFAULT "timezone"('utc'::"text", "now"()) NOT NULL,
    "updated_at" timestamp with time zone DEFAULT "timezone"('utc'::"text", "now"()) NOT NULL,
    CONSTRAINT "shield_account_invitations_status_check" CHECK (("status" = ANY (ARRAY['pending'::"text", 'accepted'::"text", 'rejected'::"text"])))
);

ALTER TABLE "public"."shield_account_invitations" OWNER TO "postgres";

CREATE TABLE "public"."shield_account_user_op_signatures" (
    "user_op_id" bigint,
    "shield_account_id" bigint,
    "signer" character varying(42),
    "proof" "text",
    "created_at" timestamp with time zone DEFAULT "timezone"('utc'::"text", "now"()) NOT NULL
);

ALTER TABLE "public"."shield_account_user_op_signatures" OWNER TO "postgres";

CREATE TABLE "public"."shield_account_user_ops" (
    "id" bigint NOT NULL,
    "shield_account_id" bigint,
    "data" "text",
    "created_at" timestamp with time zone DEFAULT "timezone"('utc'::"text", "now"()) NOT NULL
);

ALTER TABLE "public"."shield_account_user_ops" OWNER TO "postgres";

ALTER TABLE "public"."shield_account_user_ops" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."shield_account_user_ops_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE "public"."shield_accounts" (
    "id" bigint NOT NULL,
    "status" "text" DEFAULT 'pending'::"text",
    "created_at" timestamp with time zone DEFAULT "timezone"('utc'::"text", "now"()) NOT NULL,
    "updated_at" timestamp with time zone DEFAULT "timezone"('utc'::"text", "now"()) NOT NULL,
    "name" "text",
    CONSTRAINT "shield_accounts_status_check" CHECK (("status" = ANY (ARRAY['pending'::"text", 'deployed'::"text"])))
);

ALTER TABLE "public"."shield_accounts" OWNER TO "postgres";

ALTER TABLE "public"."shield_accounts" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."shield_accounts_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

ALTER TABLE ONLY "public"."addresses"
    ADD CONSTRAINT "addresses_pkey" PRIMARY KEY ("address");

ALTER TABLE ONLY "public"."shield_account_user_ops"
    ADD CONSTRAINT "shield_account_user_ops_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."shield_accounts"
    ADD CONSTRAINT "shield_accounts_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."shield_account_addresses"
    ADD CONSTRAINT "shield_account_addresses_address_fkey" FOREIGN KEY ("address") REFERENCES "public"."addresses"("address");

ALTER TABLE ONLY "public"."shield_account_addresses"
    ADD CONSTRAINT "shield_account_addresses_shield_account_id_fkey" FOREIGN KEY ("shield_account_id") REFERENCES "public"."shield_accounts"("id");

ALTER TABLE ONLY "public"."shield_account_invitations"
    ADD CONSTRAINT "shield_account_invitations_inviter_address_fkey" FOREIGN KEY ("inviter_address") REFERENCES "public"."addresses"("address");

ALTER TABLE ONLY "public"."shield_account_invitations"
    ADD CONSTRAINT "shield_account_invitations_recipient_address_fkey" FOREIGN KEY ("recipient_address") REFERENCES "public"."addresses"("address");

ALTER TABLE ONLY "public"."shield_account_invitations"
    ADD CONSTRAINT "shield_account_invitations_shield_account_id_fkey" FOREIGN KEY ("shield_account_id") REFERENCES "public"."shield_accounts"("id");

ALTER TABLE ONLY "public"."shield_account_user_op_signatures"
    ADD CONSTRAINT "shield_account_user_op_signatures_shield_account_id_fkey" FOREIGN KEY ("shield_account_id") REFERENCES "public"."shield_accounts"("id");

ALTER TABLE ONLY "public"."shield_account_user_op_signatures"
    ADD CONSTRAINT "shield_account_user_op_signatures_signer_fkey" FOREIGN KEY ("signer") REFERENCES "public"."addresses"("address");

ALTER TABLE ONLY "public"."shield_account_user_op_signatures"
    ADD CONSTRAINT "shield_account_user_op_signatures_user_op_id_fkey" FOREIGN KEY ("user_op_id") REFERENCES "public"."shield_account_user_ops"("id");

ALTER TABLE ONLY "public"."shield_account_user_ops"
    ADD CONSTRAINT "shield_account_user_ops_shield_account_id_fkey" FOREIGN KEY ("shield_account_id") REFERENCES "public"."shield_accounts"("id");

CREATE POLICY "Allow account address to SELECT user ops" ON "public"."shield_account_user_ops" FOR SELECT USING (( SELECT true
   FROM "public"."shield_account_addresses"
  WHERE (("shield_account_addresses"."shield_account_id" = "shield_account_addresses"."shield_account_id") AND (("shield_account_addresses"."address")::"text" = (("current_setting"('request.jwt.claims'::"text", true))::"json" ->> 'address'::"text")))));

CREATE POLICY "Allow account address to create (INSERT) user op" ON "public"."shield_account_user_ops" FOR INSERT WITH CHECK (( SELECT true
   FROM "public"."shield_account_addresses"
  WHERE (("shield_account_addresses"."shield_account_id" = "shield_account_addresses"."shield_account_id") AND (("shield_account_addresses"."address")::"text" = (("current_setting"('request.jwt.claims'::"text", true))::"json" ->> 'address'::"text")))));

CREATE POLICY "Allow address that is account owner to SELECT self" ON "public"."shield_account_addresses" FOR SELECT USING ((("address")::"text" = (("current_setting"('request.jwt.claims'::"text", true))::"json" ->> 'address'::"text")));

CREATE POLICY "Allow address to SELECT accounts" ON "public"."shield_accounts" FOR SELECT USING (( SELECT true
   FROM "public"."shield_account_addresses"
  WHERE (("shield_account_addresses"."shield_account_id" = "shield_accounts"."id") AND (("shield_account_addresses"."address")::"text" = (("current_setting"('request.jwt.claims'::"text", true))::"json" ->> 'address'::"text")))));

CREATE POLICY "Allow address to create account" ON "public"."shield_accounts" FOR INSERT WITH CHECK ((((("current_setting"('request.jwt.claims'::"text", true))::"json" ->> 'address'::"text") <> ''::"text") AND (NOT ( SELECT true
   FROM "public"."shield_account_addresses"
  WHERE ("shield_account_addresses"."shield_account_id" = "shield_accounts"."id")))));

CREATE POLICY "Allow address with accepted invitation to become owner" ON "public"."shield_account_addresses" FOR INSERT WITH CHECK (( SELECT true
   FROM "public"."shield_account_invitations"
  WHERE (("shield_account_invitations"."shield_account_id" = "shield_account_invitations"."shield_account_id") AND ("shield_account_invitations"."status" = 'accepted'::"text") AND (("shield_account_invitations"."recipient_address")::"text" = (("current_setting"('request.jwt.claims'::"text", true))::"json" ->> 'address'::"text")))));

CREATE POLICY "Only addresses can view their own records" ON "public"."addresses" FOR SELECT USING (((("current_setting"('request.jwt.claims'::"text", true))::"json" ->> 'address'::"text") = ("address")::"text"));

CREATE POLICY "Permit account address to create invitation (INSERT)" ON "public"."shield_account_invitations" FOR INSERT WITH CHECK (( SELECT true
   FROM "public"."shield_account_addresses"
  WHERE (("shield_account_addresses"."shield_account_id" = "shield_account_addresses"."shield_account_id") AND (("shield_account_addresses"."address")::"text" = (("current_setting"('request.jwt.claims'::"text", true))::"json" ->> 'address'::"text")))));

CREATE POLICY "Permit inviters to SELECT if inviter or recipient" ON "public"."shield_account_invitations" FOR SELECT USING (((((("current_setting"('request.jwt.claims'::"text", true))::"json" ->> 'address'::"text") = ("inviter_address")::"text") OR ((("current_setting"('request.jwt.claims'::"text", true))::"json" ->> 'address'::"text") = ("recipient_address")::"text")) AND ( SELECT true
   FROM "public"."shield_account_addresses"
  WHERE (("shield_account_addresses"."shield_account_id" = "shield_account_addresses"."shield_account_id") AND (("shield_account_addresses"."address")::"text" = (("current_setting"('request.jwt.claims'::"text", true))::"json" ->> 'address'::"text"))))));

CREATE POLICY "Permit recipients to SELECT if recipient" ON "public"."shield_account_invitations" FOR SELECT USING (((("current_setting"('request.jwt.claims'::"text", true))::"json" ->> 'address'::"text") = ("recipient_address")::"text"));

CREATE POLICY "Permit recipients to accept a pending invitation (UPDATE)" ON "public"."shield_account_invitations" FOR UPDATE USING ((((("current_setting"('request.jwt.claims'::"text", true))::"json" ->> 'address'::"text") = ("recipient_address")::"text") AND ("status" = 'pending'::"text"))) WITH CHECK (("status" = 'accepted'::"text"));

ALTER TABLE "public"."addresses" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."shield_account_addresses" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."shield_account_invitations" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."shield_account_user_op_signatures" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."shield_account_user_ops" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."shield_accounts" ENABLE ROW LEVEL SECURITY;

GRANT USAGE ON SCHEMA "extensions" TO "anon";
GRANT USAGE ON SCHEMA "extensions" TO "authenticated";
GRANT USAGE ON SCHEMA "extensions" TO "service_role";
GRANT ALL ON SCHEMA "extensions" TO "dashboard_user";

REVOKE USAGE ON SCHEMA "public" FROM PUBLIC;
GRANT USAGE ON SCHEMA "public" TO "postgres";
GRANT USAGE ON SCHEMA "public" TO "anon";
GRANT USAGE ON SCHEMA "public" TO "authenticated";
GRANT USAGE ON SCHEMA "public" TO "service_role";

GRANT ALL ON FUNCTION "extensions"."algorithm_sign"("signables" "text", "secret" "text", "algorithm" "text") TO "postgres" WITH GRANT OPTION;
GRANT ALL ON FUNCTION "extensions"."algorithm_sign"("signables" "text", "secret" "text", "algorithm" "text") TO "dashboard_user";

GRANT ALL ON FUNCTION "extensions"."armor"("bytea") TO "postgres" WITH GRANT OPTION;
GRANT ALL ON FUNCTION "extensions"."armor"("bytea") TO "dashboard_user";

GRANT ALL ON FUNCTION "extensions"."armor"("bytea", "text"[], "text"[]) TO "postgres" WITH GRANT OPTION;
GRANT ALL ON FUNCTION "extensions"."armor"("bytea", "text"[], "text"[]) TO "dashboard_user";

GRANT ALL ON FUNCTION "extensions"."crypt"("text", "text") TO "postgres" WITH GRANT OPTION;
GRANT ALL ON FUNCTION "extensions"."crypt"("text", "text") TO "dashboard_user";

GRANT ALL ON FUNCTION "extensions"."dearmor"("text") TO "postgres" WITH GRANT OPTION;
GRANT ALL ON FUNCTION "extensions"."dearmor"("text") TO "dashboard_user";

GRANT ALL ON FUNCTION "extensions"."decrypt"("bytea", "bytea", "text") TO "postgres" WITH GRANT OPTION;
GRANT ALL ON FUNCTION "extensions"."decrypt"("bytea", "bytea", "text") TO "dashboard_user";

GRANT ALL ON FUNCTION "extensions"."decrypt_iv"("bytea", "bytea", "bytea", "text") TO "postgres" WITH GRANT OPTION;
GRANT ALL ON FUNCTION "extensions"."decrypt_iv"("bytea", "bytea", "bytea", "text") TO "dashboard_user";

GRANT ALL ON FUNCTION "extensions"."digest"("bytea", "text") TO "postgres" WITH GRANT OPTION;
GRANT ALL ON FUNCTION "extensions"."digest"("bytea", "text") TO "dashboard_user";

GRANT ALL ON FUNCTION "extensions"."digest"("text", "text") TO "postgres" WITH GRANT OPTION;
GRANT ALL ON FUNCTION "extensions"."digest"("text", "text") TO "dashboard_user";

GRANT ALL ON FUNCTION "extensions"."encrypt"("bytea", "bytea", "text") TO "postgres" WITH GRANT OPTION;
GRANT ALL ON FUNCTION "extensions"."encrypt"("bytea", "bytea", "text") TO "dashboard_user";

GRANT ALL ON FUNCTION "extensions"."encrypt_iv"("bytea", "bytea", "bytea", "text") TO "postgres" WITH GRANT OPTION;
GRANT ALL ON FUNCTION "extensions"."encrypt_iv"("bytea", "bytea", "bytea", "text") TO "dashboard_user";

GRANT ALL ON FUNCTION "extensions"."gen_random_bytes"(integer) TO "postgres" WITH GRANT OPTION;
GRANT ALL ON FUNCTION "extensions"."gen_random_bytes"(integer) TO "dashboard_user";

GRANT ALL ON FUNCTION "extensions"."gen_random_uuid"() TO "postgres" WITH GRANT OPTION;
GRANT ALL ON FUNCTION "extensions"."gen_random_uuid"() TO "dashboard_user";

GRANT ALL ON FUNCTION "extensions"."gen_salt"("text") TO "postgres" WITH GRANT OPTION;
GRANT ALL ON FUNCTION "extensions"."gen_salt"("text") TO "dashboard_user";

GRANT ALL ON FUNCTION "extensions"."gen_salt"("text", integer) TO "postgres" WITH GRANT OPTION;
GRANT ALL ON FUNCTION "extensions"."gen_salt"("text", integer) TO "dashboard_user";

REVOKE ALL ON FUNCTION "extensions"."grant_pg_cron_access"() FROM "postgres";
GRANT ALL ON FUNCTION "extensions"."grant_pg_cron_access"() TO "postgres" WITH GRANT OPTION;
GRANT ALL ON FUNCTION "extensions"."grant_pg_cron_access"() TO "dashboard_user";

REVOKE ALL ON FUNCTION "extensions"."grant_pg_net_access"() FROM "postgres";
GRANT ALL ON FUNCTION "extensions"."grant_pg_net_access"() TO "postgres" WITH GRANT OPTION;
GRANT ALL ON FUNCTION "extensions"."grant_pg_net_access"() TO "dashboard_user";

GRANT ALL ON FUNCTION "extensions"."hmac"("bytea", "bytea", "text") TO "postgres" WITH GRANT OPTION;
GRANT ALL ON FUNCTION "extensions"."hmac"("bytea", "bytea", "text") TO "dashboard_user";

GRANT ALL ON FUNCTION "extensions"."hmac"("text", "text", "text") TO "postgres" WITH GRANT OPTION;
GRANT ALL ON FUNCTION "extensions"."hmac"("text", "text", "text") TO "dashboard_user";

GRANT ALL ON FUNCTION "extensions"."pg_stat_statements"("showtext" boolean, OUT "userid" "oid", OUT "dbid" "oid", OUT "toplevel" boolean, OUT "queryid" bigint, OUT "query" "text", OUT "plans" bigint, OUT "total_plan_time" double precision, OUT "min_plan_time" double precision, OUT "max_plan_time" double precision, OUT "mean_plan_time" double precision, OUT "stddev_plan_time" double precision, OUT "calls" bigint, OUT "total_exec_time" double precision, OUT "min_exec_time" double precision, OUT "max_exec_time" double precision, OUT "mean_exec_time" double precision, OUT "stddev_exec_time" double precision, OUT "rows" bigint, OUT "shared_blks_hit" bigint, OUT "shared_blks_read" bigint, OUT "shared_blks_dirtied" bigint, OUT "shared_blks_written" bigint, OUT "local_blks_hit" bigint, OUT "local_blks_read" bigint, OUT "local_blks_dirtied" bigint, OUT "local_blks_written" bigint, OUT "temp_blks_read" bigint, OUT "temp_blks_written" bigint, OUT "blk_read_time" double precision, OUT "blk_write_time" double precision, OUT "temp_blk_read_time" double precision, OUT "temp_blk_write_time" double precision, OUT "wal_records" bigint, OUT "wal_fpi" bigint, OUT "wal_bytes" numeric, OUT "jit_functions" bigint, OUT "jit_generation_time" double precision, OUT "jit_inlining_count" bigint, OUT "jit_inlining_time" double precision, OUT "jit_optimization_count" bigint, OUT "jit_optimization_time" double precision, OUT "jit_emission_count" bigint, OUT "jit_emission_time" double precision) TO "dashboard_user";

GRANT ALL ON FUNCTION "extensions"."pg_stat_statements_info"(OUT "dealloc" bigint, OUT "stats_reset" timestamp with time zone) TO "dashboard_user";

GRANT ALL ON FUNCTION "extensions"."pg_stat_statements_reset"("userid" "oid", "dbid" "oid", "queryid" bigint) TO "dashboard_user";

GRANT ALL ON FUNCTION "extensions"."pgp_armor_headers"("text", OUT "key" "text", OUT "value" "text") TO "postgres" WITH GRANT OPTION;
GRANT ALL ON FUNCTION "extensions"."pgp_armor_headers"("text", OUT "key" "text", OUT "value" "text") TO "dashboard_user";

GRANT ALL ON FUNCTION "extensions"."pgp_key_id"("bytea") TO "postgres" WITH GRANT OPTION;
GRANT ALL ON FUNCTION "extensions"."pgp_key_id"("bytea") TO "dashboard_user";

GRANT ALL ON FUNCTION "extensions"."pgp_pub_decrypt"("bytea", "bytea") TO "postgres" WITH GRANT OPTION;
GRANT ALL ON FUNCTION "extensions"."pgp_pub_decrypt"("bytea", "bytea") TO "dashboard_user";

GRANT ALL ON FUNCTION "extensions"."pgp_pub_decrypt"("bytea", "bytea", "text") TO "postgres" WITH GRANT OPTION;
GRANT ALL ON FUNCTION "extensions"."pgp_pub_decrypt"("bytea", "bytea", "text") TO "dashboard_user";

GRANT ALL ON FUNCTION "extensions"."pgp_pub_decrypt"("bytea", "bytea", "text", "text") TO "postgres" WITH GRANT OPTION;
GRANT ALL ON FUNCTION "extensions"."pgp_pub_decrypt"("bytea", "bytea", "text", "text") TO "dashboard_user";

GRANT ALL ON FUNCTION "extensions"."pgp_pub_decrypt_bytea"("bytea", "bytea") TO "postgres" WITH GRANT OPTION;
GRANT ALL ON FUNCTION "extensions"."pgp_pub_decrypt_bytea"("bytea", "bytea") TO "dashboard_user";

GRANT ALL ON FUNCTION "extensions"."pgp_pub_decrypt_bytea"("bytea", "bytea", "text") TO "postgres" WITH GRANT OPTION;
GRANT ALL ON FUNCTION "extensions"."pgp_pub_decrypt_bytea"("bytea", "bytea", "text") TO "dashboard_user";

GRANT ALL ON FUNCTION "extensions"."pgp_pub_decrypt_bytea"("bytea", "bytea", "text", "text") TO "postgres" WITH GRANT OPTION;
GRANT ALL ON FUNCTION "extensions"."pgp_pub_decrypt_bytea"("bytea", "bytea", "text", "text") TO "dashboard_user";

GRANT ALL ON FUNCTION "extensions"."pgp_pub_encrypt"("text", "bytea") TO "postgres" WITH GRANT OPTION;
GRANT ALL ON FUNCTION "extensions"."pgp_pub_encrypt"("text", "bytea") TO "dashboard_user";

GRANT ALL ON FUNCTION "extensions"."pgp_pub_encrypt"("text", "bytea", "text") TO "postgres" WITH GRANT OPTION;
GRANT ALL ON FUNCTION "extensions"."pgp_pub_encrypt"("text", "bytea", "text") TO "dashboard_user";

GRANT ALL ON FUNCTION "extensions"."pgp_pub_encrypt_bytea"("bytea", "bytea") TO "postgres" WITH GRANT OPTION;
GRANT ALL ON FUNCTION "extensions"."pgp_pub_encrypt_bytea"("bytea", "bytea") TO "dashboard_user";

GRANT ALL ON FUNCTION "extensions"."pgp_pub_encrypt_bytea"("bytea", "bytea", "text") TO "postgres" WITH GRANT OPTION;
GRANT ALL ON FUNCTION "extensions"."pgp_pub_encrypt_bytea"("bytea", "bytea", "text") TO "dashboard_user";

GRANT ALL ON FUNCTION "extensions"."pgp_sym_decrypt"("bytea", "text") TO "postgres" WITH GRANT OPTION;
GRANT ALL ON FUNCTION "extensions"."pgp_sym_decrypt"("bytea", "text") TO "dashboard_user";

GRANT ALL ON FUNCTION "extensions"."pgp_sym_decrypt"("bytea", "text", "text") TO "postgres" WITH GRANT OPTION;
GRANT ALL ON FUNCTION "extensions"."pgp_sym_decrypt"("bytea", "text", "text") TO "dashboard_user";

GRANT ALL ON FUNCTION "extensions"."pgp_sym_decrypt_bytea"("bytea", "text") TO "postgres" WITH GRANT OPTION;
GRANT ALL ON FUNCTION "extensions"."pgp_sym_decrypt_bytea"("bytea", "text") TO "dashboard_user";

GRANT ALL ON FUNCTION "extensions"."pgp_sym_decrypt_bytea"("bytea", "text", "text") TO "postgres" WITH GRANT OPTION;
GRANT ALL ON FUNCTION "extensions"."pgp_sym_decrypt_bytea"("bytea", "text", "text") TO "dashboard_user";

GRANT ALL ON FUNCTION "extensions"."pgp_sym_encrypt"("text", "text") TO "postgres" WITH GRANT OPTION;
GRANT ALL ON FUNCTION "extensions"."pgp_sym_encrypt"("text", "text") TO "dashboard_user";

GRANT ALL ON FUNCTION "extensions"."pgp_sym_encrypt"("text", "text", "text") TO "postgres" WITH GRANT OPTION;
GRANT ALL ON FUNCTION "extensions"."pgp_sym_encrypt"("text", "text", "text") TO "dashboard_user";

GRANT ALL ON FUNCTION "extensions"."pgp_sym_encrypt_bytea"("bytea", "text") TO "postgres" WITH GRANT OPTION;
GRANT ALL ON FUNCTION "extensions"."pgp_sym_encrypt_bytea"("bytea", "text") TO "dashboard_user";

GRANT ALL ON FUNCTION "extensions"."pgp_sym_encrypt_bytea"("bytea", "text", "text") TO "postgres" WITH GRANT OPTION;
GRANT ALL ON FUNCTION "extensions"."pgp_sym_encrypt_bytea"("bytea", "text", "text") TO "dashboard_user";

GRANT ALL ON FUNCTION "extensions"."sign"("payload" "json", "secret" "text", "algorithm" "text") TO "postgres" WITH GRANT OPTION;
GRANT ALL ON FUNCTION "extensions"."sign"("payload" "json", "secret" "text", "algorithm" "text") TO "dashboard_user";

GRANT ALL ON FUNCTION "extensions"."try_cast_double"("inp" "text") TO "postgres" WITH GRANT OPTION;
GRANT ALL ON FUNCTION "extensions"."try_cast_double"("inp" "text") TO "dashboard_user";

GRANT ALL ON FUNCTION "extensions"."url_decode"("data" "text") TO "postgres" WITH GRANT OPTION;
GRANT ALL ON FUNCTION "extensions"."url_decode"("data" "text") TO "dashboard_user";

GRANT ALL ON FUNCTION "extensions"."url_encode"("data" "bytea") TO "postgres" WITH GRANT OPTION;
GRANT ALL ON FUNCTION "extensions"."url_encode"("data" "bytea") TO "dashboard_user";

GRANT ALL ON FUNCTION "extensions"."uuid_generate_v1"() TO "postgres" WITH GRANT OPTION;
GRANT ALL ON FUNCTION "extensions"."uuid_generate_v1"() TO "dashboard_user";

GRANT ALL ON FUNCTION "extensions"."uuid_generate_v1mc"() TO "postgres" WITH GRANT OPTION;
GRANT ALL ON FUNCTION "extensions"."uuid_generate_v1mc"() TO "dashboard_user";

GRANT ALL ON FUNCTION "extensions"."uuid_generate_v3"("namespace" "uuid", "name" "text") TO "postgres" WITH GRANT OPTION;
GRANT ALL ON FUNCTION "extensions"."uuid_generate_v3"("namespace" "uuid", "name" "text") TO "dashboard_user";

GRANT ALL ON FUNCTION "extensions"."uuid_generate_v4"() TO "postgres" WITH GRANT OPTION;
GRANT ALL ON FUNCTION "extensions"."uuid_generate_v4"() TO "dashboard_user";

GRANT ALL ON FUNCTION "extensions"."uuid_generate_v5"("namespace" "uuid", "name" "text") TO "postgres" WITH GRANT OPTION;
GRANT ALL ON FUNCTION "extensions"."uuid_generate_v5"("namespace" "uuid", "name" "text") TO "dashboard_user";

GRANT ALL ON FUNCTION "extensions"."uuid_nil"() TO "postgres" WITH GRANT OPTION;
GRANT ALL ON FUNCTION "extensions"."uuid_nil"() TO "dashboard_user";

GRANT ALL ON FUNCTION "extensions"."uuid_ns_dns"() TO "postgres" WITH GRANT OPTION;
GRANT ALL ON FUNCTION "extensions"."uuid_ns_dns"() TO "dashboard_user";

GRANT ALL ON FUNCTION "extensions"."uuid_ns_oid"() TO "postgres" WITH GRANT OPTION;
GRANT ALL ON FUNCTION "extensions"."uuid_ns_oid"() TO "dashboard_user";

GRANT ALL ON FUNCTION "extensions"."uuid_ns_url"() TO "postgres" WITH GRANT OPTION;
GRANT ALL ON FUNCTION "extensions"."uuid_ns_url"() TO "dashboard_user";

GRANT ALL ON FUNCTION "extensions"."uuid_ns_x500"() TO "postgres" WITH GRANT OPTION;
GRANT ALL ON FUNCTION "extensions"."uuid_ns_x500"() TO "dashboard_user";

GRANT ALL ON FUNCTION "extensions"."verify"("token" "text", "secret" "text", "algorithm" "text") TO "postgres" WITH GRANT OPTION;
GRANT ALL ON FUNCTION "extensions"."verify"("token" "text", "secret" "text", "algorithm" "text") TO "dashboard_user";

GRANT ALL ON FUNCTION "graphql_public"."graphql"("operationName" "text", "query" "text", "variables" "jsonb", "extensions" "jsonb") TO "postgres";
GRANT ALL ON FUNCTION "graphql_public"."graphql"("operationName" "text", "query" "text", "variables" "jsonb", "extensions" "jsonb") TO "anon";
GRANT ALL ON FUNCTION "graphql_public"."graphql"("operationName" "text", "query" "text", "variables" "jsonb", "extensions" "jsonb") TO "authenticated";
GRANT ALL ON FUNCTION "graphql_public"."graphql"("operationName" "text", "query" "text", "variables" "jsonb", "extensions" "jsonb") TO "service_role";

GRANT ALL ON FUNCTION "pgsodium"."crypto_aead_det_decrypt"("message" "bytea", "additional" "bytea", "key_uuid" "uuid", "nonce" "bytea") TO "service_role";

GRANT ALL ON FUNCTION "pgsodium"."crypto_aead_det_encrypt"("message" "bytea", "additional" "bytea", "key_uuid" "uuid", "nonce" "bytea") TO "service_role";

GRANT ALL ON FUNCTION "pgsodium"."crypto_aead_det_keygen"() TO "service_role";

GRANT ALL ON TABLE "extensions"."pg_stat_statements" TO "dashboard_user";

GRANT ALL ON TABLE "extensions"."pg_stat_statements_info" TO "dashboard_user";

GRANT ALL ON TABLE "pgsodium"."decrypted_key" TO "pgsodium_keyholder";

GRANT ALL ON TABLE "pgsodium"."masking_rule" TO "pgsodium_keyholder";

GRANT ALL ON TABLE "pgsodium"."mask_columns" TO "pgsodium_keyholder";

GRANT ALL ON TABLE "public"."addresses" TO "anon";
GRANT ALL ON TABLE "public"."addresses" TO "authenticated";
GRANT ALL ON TABLE "public"."addresses" TO "service_role";

GRANT ALL ON TABLE "public"."shield_account_addresses" TO "anon";
GRANT ALL ON TABLE "public"."shield_account_addresses" TO "authenticated";
GRANT ALL ON TABLE "public"."shield_account_addresses" TO "service_role";

GRANT ALL ON TABLE "public"."shield_account_invitations" TO "anon";
GRANT ALL ON TABLE "public"."shield_account_invitations" TO "authenticated";
GRANT ALL ON TABLE "public"."shield_account_invitations" TO "service_role";

GRANT ALL ON TABLE "public"."shield_account_user_op_signatures" TO "anon";
GRANT ALL ON TABLE "public"."shield_account_user_op_signatures" TO "authenticated";
GRANT ALL ON TABLE "public"."shield_account_user_op_signatures" TO "service_role";

GRANT ALL ON TABLE "public"."shield_account_user_ops" TO "anon";
GRANT ALL ON TABLE "public"."shield_account_user_ops" TO "authenticated";
GRANT ALL ON TABLE "public"."shield_account_user_ops" TO "service_role";

GRANT ALL ON SEQUENCE "public"."shield_account_user_ops_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."shield_account_user_ops_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."shield_account_user_ops_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."shield_accounts" TO "anon";
GRANT ALL ON TABLE "public"."shield_accounts" TO "authenticated";
GRANT ALL ON TABLE "public"."shield_accounts" TO "service_role";

GRANT ALL ON SEQUENCE "public"."shield_accounts_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."shield_accounts_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."shield_accounts_id_seq" TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "service_role";

RESET ALL;
